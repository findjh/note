单工：单向通信； 半双工：单双向通信，同一时间点只能单向流动，先有请求再有响应，不能同时流动。就像单车道。  全双工：全双向通信，就像双车道，可以同时通信。
http:半双工协议，服务器不能主动推送数据给浏览器。
服务端轮询案例：(长轮询) 等待服务端返回结果的时间比较长！
/** 命令nodemon app.js开启服务端
  let express = require ('express');
  let app = express();
  console.log('__dirname',__dirname)
  app.use(express.static(__dirname));
  let count = 0;
  app.get('/clock',function(req,res){
    console.log('服务端接受到请求,开始轮询！！！！！')
    let timer = setInterval(function(){
      if(++count === 4){
        res.send(`菜价变化了${Math.random()}`);
        count = 0;
        clearInterval(timer)
      }
    },1000)
  })
  app.listen(9000)

**/
/** 前端
  <script>
        let clock = document.getElementById('clock')
        function send(){
            let xhr = new XMLHttpRequest;
            xhr.open('get','/clock',true);
            xhr.onreadystatechange = function(){
                if(xhr.readyState == 4 && xhr.status == 200){
                    clock.innerHTML = xhr.responseText;
                    send(); //获取到服务器响应后，再发起请求
                }
            }
            xhr.send();
        }
        send();
    </script>
**/

iframe流：通过在HTML页面里嵌入一个隐藏的iframe，然后将这个iframe的src属性设为对一个长连接的请求，服务器端就能源源不断地往客户推送数据。
 长连接：服务端返回用的方法改为res.write （不要用res.send，因为send=write+关闭）
 iframe案例：
 /** 服务端：
  let express = require ('express');
  let app = express();
  app.use(express.static(__dirname));
  app.get('/clock',function(req,res){
    console.log('服务端接受到请求')
    res.setHeader('Content-Type','text/html')
    setInterval(()=>{
      res.write(`
        <script>
          parent.setTime('${new Date().toLocaleString()}')
        </script>
      `)
    },1000)
  })
app.listen(9000)


前端：
  <body>
      <div id="app"></div>
      <iframe src="/clock" style="visibility: hidden;"></iframe>
      <script>
          function setTime(ts){
              let app = document.getElementById('app');
              app.innerHTML = ts;
          }
      </script>
  </body>
 **/
 
display:none不占位置; opacity,visibility占位置；opactiy有事件；visibility无事件；

EventSource流：也叫‘server-sent-event’。 //缺点：浏览器的刷新按钮一直是加载状态
浏览器端：
  浏览器需要创建一个EventSource对象，并且传入一个服务端的接口URI作为参。
  默认EventSource对象通过侦听message事件获取服务端传来的消息。
  open 事件在http连接建立后触发。
  error事件会在通信错误（连接中断、服务端返回数据失败）后触发。
  同时EventSource允许服务端指定自定义事件，客户端侦听该事件即可；
  不能跨域；
服务器端：
  MIMI格式：text/event-stream, 基于HTTP1.1长连接，针对1.0的服务器需要特殊设置。
  event-source：utf-8格式。消息每个字段用“\n”做分隔。4个字段：
    Event:事件类型；
    Data:发送的数据；
    ID:每条事件流的ID;
    Retry:浏览器重新连接需要的时间，以及自动重新连接的过程，之前收到的最后一个事件流ID会被发送到服务器

\n :new line 换行；
\r: 回车，回到起始位置； 
案例：
/**
  let express = require ('express');
  let app = express();
  app.use(express.static(__dirname));
  app.get('/clock',function(req,res){
    console.log('服务端接受到请求')
    let counter = 0;
    res.setHeader('Content-Type','text/event-stream')   //一定要加这行
    setInterval(()=>{
      res.write(`id:${++counter}\nevent:message\ndata:${new Date().toLocaleString()}\n\n`)  // 后面一定要加 \n\n 标识结束
    },1000)
  })
  app.listen(9000)
  
  前端：
    <body>
    <div id="app">time:~~</div>
    <script>
        let es = new EventSource('/clock');
        es.onmessage = function(e){
            let data = e.data;
            app.innerHTML = data;
        }
    </script>
</body>
  
**/

res.on('close',function(){}) //监听连接的关闭。

websocket:可以跨域。
案例：
/**
  let express = require ('express');
  let app = express();
  app.use(express.static(__dirname));
  let WebSocketServer = require('ws').Server;
  let server = new WebSocketServer({port:3000}) //ws端口号不能和node服务端一致！
  server.on('connection',function(socket){
    console.log('服务端：socket连接成功')
    socket.on('message',function(message){
      console.log('服务端：已经接受到了客户端的消息--'+message);
    })
    socket.send('给你一个炸弹')

  })
  app.listen(9000)
  
  
   <script>
        let socket = new WebSocket('ws://localhost:3000')
        socket.onopen = function(){
            console.log('客户端：连接已经打开');
        }
        socket.onmessage = function(event){
            console.log('客户端：收到--'+event.data);
            socket.send('abcedfu')
        }
    </script>
**/
ping: 在吗？
pong: 在！
socket.io库：
案例：
/**
  let express = require ('express');
  let app = express();
  app.use(express.static(__dirname));
  let server = require('http').createServer(app);
  let io = require('socket.io')(server);
  io.on('connection',function(socket){
    console.log('有客户端链接到服务端了！');
    socket.on('message',function(msg){
      console.log('收到客户端的'+msg);
      socket.send('服务器说：'+msg)
    })
    socket.on('disconnect',function(){
      console.log('关闭了')
    })
  })
  server.listen(9000)
  
  前端
  <script src="/socket.io/socket.io.js"></script>
    <script>
        let socket = io.connect('/');
        socket.on('connect',function(){
            console.log('客户端连接到服务器了！');
            socket.send('hello')
        })
        socket.on('message',function(message){
            console.log('客户端收到'+message)
        })
        socket.on('disconnect',function(){
            console.log('断开链接')
        })
    </script>

**/

所有人广播：io.emit('message','全局广播');
向除了自己外的所有人广播：socket.broadcast.emit('message',msg);
向房间内广播：从服务器的角度来提交事件，提交者会包含在内。
              io.in('myRoom').emit('message',msg);  
             io.of('/news').in('myRoom').emit('message',msg);
向房间内广播：从客户端的角度来提交事件，提交者会排除在外。
//向myRoom广播一个事件，在此房间内除了自己外的所有客户都会收到消息。
              socket.broadcast.to('myRoom').emit('message',msg);  
             socket.broadcast.to('myRoom').emit('message',msg);
             
获取房间列表：io.socket.adapter.rooms;
