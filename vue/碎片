- ref和 reactive的区别：reactive内部采用proxy ref中内部使用的是defineProperty
- 当纯 HTML 被完全加载以及解析时，DOMContentLoaded 事件会被触发，不用等待 css、img、iframe 加载完。
- 当整个页面及所有依赖资源如样式表和图片都已完成加载时，将触发 load 事件。
-  response header中的etag、last-modified在客户端重新向服务端发起请求时，会在request header中换个key名：
  // response header
  etag: '5c20abbd-e2e8'
  last-modified: Mon, 24 Dec 2018 09:49:49 GMT
  // request header 变为
  if-none-matched: '5c20abbd-e2e8'
  if-modified-since: Mon, 24 Dec 2018 09:49:49 GMT
- 强缓存与协商缓存：https://www.jianshu.com/p/9c95db596df5
- 使用 addEventListener() 监听 error 事件，可以捕获到资源加载失败错误。
   // 捕获资源加载失败错误 js css img...
    window.addEventListener('error', e => {}）
- 使用 window.onerror 可以监听 js 错误。
    // 监听 js 错误
    window.onerror = (msg, url, line, column, error) => {}
- 使用 addEventListener() 监听 unhandledrejection 事件，可以捕获到未处理的 promise 错误。
    // 监听 promise 错误 缺点是获取不到列数据
    window.addEventListener('unhandledrejection', e => {})
- 利用 window.onerror 是捕获不到 Vue 错误的，它需要使用 Vue 提供的 API 进行监听。
    Vue.config.errorHandler = (err, vm, info) => {
        // 将报错信息打印到控制台
        console.error(err)
     }
 - PV(page view) 是页面浏览量，UV(Unique visitor)用户访问量。PV 只要访问一次页面就算一次，UV 同一天内多次访问只算一次。
 - 行为数据采集
   页面停留时长： 用户进入页面记录一个初始时间，用户离开页面时用当前时间减去初始时间，就是用户停留时长。这个计算逻辑可以放在 beforeunload 事件里做。
- 
  页面总高度 ：pageHeight = document.documentElement.scrollHeight || document.body.scrollHeight
  页面滚动高度：scrollTop = document.documentElement.scrollTop || document.body.scrollTop
  视口高度：viewportHeight = window.innerHeight
- 用户点击
  利用 addEventListener() 监听 mousedown、touchstart 事件，我们可以收集用户每一次点击区域的大小，点击坐标在整个页面中的具体位置，点击元素的内容等信息。
- 页面跳转
  利用 addEventListener() 监听 popstate、hashchange 页面跳转事件。需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。
  只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()或者history.forward()方法）。同理，hashchange 也一样。
 - 数据上报 ：https://www.jianshu.com/p/04e88271a8f2
 
 - 同步请求：
    页面卸载或刷新时进行上报的话，请求可能会在浏览器关闭或重新加载前还未发送至服务端就被浏览器 cancel 掉，导致数据上报失败。
    我们可以将 ajax 请求改为同步方法，这样就能保证请求一定能发送到服务端。由于 fetch 及 axios 都不支持同步请求，所以需要通过 XMLHttpRequest 发送同步请求。
    这里要注意的是，将请求改为同步以后，会阻塞页面关闭或重新加载的过程，这样就会影响用户体验。
